"""
Auto-generated City class with SQLAlchemy methods.

This class is generated by splurge-sql-generator.
Do not edit this file manually - it will be overwritten.
"""

import logging
from typing import List
from sqlalchemy import text
from sqlalchemy.engine import Connection, Result
from sqlalchemy.engine.row import Row


class City:
    """
    City with SQLAlchemy-based database operations.

    This class provides only class methods (for explicit connection and transaction control).

    Attributes:
        logger: Class-level logger used by default for all operations.
    """

    logger = logging.getLogger(f"{__name__}.City")
    # Attach a NullHandler to avoid 'No handler' warnings in CLI/standalone usage
    if not logger.handlers:
        logger.addHandler(logging.NullHandler())

    @classmethod
    def create_table(
        cls,
        *,
        connection: Connection,
    ) -> Result:
        """
        Other operation: create_table (class method).
        Statement type: execute
        Args:
            connection: SQLAlchemy database connection

        Returns:
            SQLAlchemy Result object
        """
        logger = cls.logger

        logger.debug("Executing create_table operation")

        sql = """
        CREATE TABLE IF NOT EXISTS city (
            id VARCHAR(36) PRIMARY KEY NOT NULL,
            name VARCHAR(128) NOT NULL,
            alias VARCHAR(128) NOT NULL,
            county_alias VARCHAR(128) NOT NULL,
            state_alias VARCHAR(128) NOT NULL,
            created_at DATETIME NOT NULL,
            updated_at DATETIME NOT NULL,
            UNIQUE KEY (state_alias, county_alias, alias)
            UNIQUE KEY (state_alias, county_alias, name)
            FOREIGN KEY (state_alias) REFERENCES state(alias)
            FOREIGN KEY (county_alias) REFERENCES county(alias)
        )
        """

        # Execute SQL query
        try:
            result = connection.execute(text(sql))

            # Execute non-select operation
            logger.debug("Executed non-select operation")
            return result
        except Exception as e:
            logger.error("Error in create_table operation: %s", str(e))
            raise

    @classmethod
    def insert_city(
        cls,
        *,
        connection: Connection,
        id: str,
        name: str,
        alias: str,
        county_alias: str,
        state_alias: str,
    ) -> Result:
        """
        Insert operation: insert_city (class method).
        Statement type: execute
        Args:
            connection: SQLAlchemy database connection
            id: Parameter for id
            name: Parameter for name
            alias: Parameter for alias
            county_alias: Parameter for county_alias
            state_alias: Parameter for state_alias

        Returns:
            SQLAlchemy Result object
        """
        logger = cls.logger

        logger.debug("Executing insert_city operation")

        sql = """
        INSERT INTO city (id, name, alias, county_alias, state_alias, created_at, updated_at) 
        VALUES (
            :id,
            :name,  
            :alias,
            :county_alias,
            :state_alias,
            NOW(),
            NOW()
        )
        """

        # Prepare parameters
        params = {
            "id": id,
            "name": name,
            "alias": alias,
            "county_alias": county_alias,
            "state_alias": state_alias,
        }
        logger.debug("Parameters: %s", params)

        # Execute SQL query
        try:
            result = connection.execute(text(sql), params)

            # Execute non-select operation
            logger.debug("Executed non-select operation")
            return result
        except Exception as e:
            logger.error("Error in insert_city operation: %s", str(e))
            raise

    @classmethod
    def update_city(
        cls,
        *,
        connection: Connection,
        name: str,
        alias: str,
        county_alias: str,
        state_alias: str,
        id: str,
    ) -> Result:
        """
        Update operation: update_city (class method).
        Statement type: execute
        Args:
            connection: SQLAlchemy database connection
            name: Parameter for name
            alias: Parameter for alias
            county_alias: Parameter for county_alias
            state_alias: Parameter for state_alias
            id: Parameter for id

        Returns:
            SQLAlchemy Result object
        """
        logger = cls.logger

        logger.debug("Executing update_city operation")

        sql = """
        UPDATE city 
        SET 
            name = :name, 
            alias = :alias, 
            county_alias = :county_alias, 
            state_alias = :state_alias, 
            updated_at = NOW() 
        WHERE id = :id
        """

        # Prepare parameters
        params = {
            "name": name,
            "alias": alias,
            "county_alias": county_alias,
            "state_alias": state_alias,
            "id": id,
        }
        logger.debug("Parameters: %s", params)

        # Execute SQL query
        try:
            result = connection.execute(text(sql), params)

            # Execute non-select operation
            logger.debug("Executed non-select operation")
            return result
        except Exception as e:
            logger.error("Error in update_city operation: %s", str(e))
            raise

    @classmethod
    def get_city_by_id(
        cls,
        *,
        connection: Connection,
        id: str,
    ) -> List[Row]:
        """
        Select operation: get_city_by_id (class method).
        Statement type: fetch
        Args:
            connection: SQLAlchemy database connection
            id: Parameter for id

        Returns:
            List of result rows
        """
        logger = cls.logger

        logger.debug("Executing get_city_by_id operation")

        sql = """
        SELECT * 
        FROM city 
        WHERE id = :id
        """

        # Prepare parameters
        params = {
            "id": id,
        }
        logger.debug("Parameters: %s", params)

        # Execute SQL query
        try:
            result = connection.execute(text(sql), params)

            # Fetch results
            rows = result.fetchall()
            logger.debug("Fetched %d rows", len(rows))
            return rows
        except Exception as e:
            logger.error("Error in get_city_by_id operation: %s", str(e))
            raise

    @classmethod
    def get_city_by_alias_and_county_alias_and_state_alias(
        cls,
        *,
        connection: Connection,
        alias: str,
        county_alias: str,
        state_alias: str,
    ) -> List[Row]:
        """
        Select operation: get_city_by_alias_and_county_alias_and_state_alias (class method).
        Statement type: fetch
        Args:
            connection: SQLAlchemy database connection
            alias: Parameter for alias
            county_alias: Parameter for county_alias
            state_alias: Parameter for state_alias

        Returns:
            List of result rows
        """
        logger = cls.logger

        logger.debug(
            "Executing get_city_by_alias_and_county_alias_and_state_alias operation"
        )

        sql = """
        SELECT * 
        FROM city 
        WHERE 
            alias = :alias 
            AND county_alias = :county_alias 
            AND state_alias = :state_alias
        """

        # Prepare parameters
        params = {
            "alias": alias,
            "county_alias": county_alias,
            "state_alias": state_alias,
        }
        logger.debug("Parameters: %s", params)

        # Execute SQL query
        try:
            result = connection.execute(text(sql), params)

            # Fetch results
            rows = result.fetchall()
            logger.debug("Fetched %d rows", len(rows))
            return rows
        except Exception as e:
            logger.error(
                "Error in get_city_by_alias_and_county_alias_and_state_alias operation: %s",
                str(e),
            )
            raise

    @classmethod
    def get_cities_by_county_alias_and_state_alias(
        cls,
        *,
        connection: Connection,
        county_alias: str,
        state_alias: str,
    ) -> List[Row]:
        """
        Select operation: get_cities_by_county_alias_and_state_alias (class method).
        Statement type: fetch
        Args:
            connection: SQLAlchemy database connection
            county_alias: Parameter for county_alias
            state_alias: Parameter for state_alias

        Returns:
            List of result rows
        """
        logger = cls.logger

        logger.debug("Executing get_cities_by_county_alias_and_state_alias operation")

        sql = """
        SELECT * 
        FROM city 
        WHERE 
            county_alias = :county_alias 
            AND state_alias = :state_alias 
            ORDER BY name
        """

        # Prepare parameters
        params = {
            "county_alias": county_alias,
            "state_alias": state_alias,
        }
        logger.debug("Parameters: %s", params)

        # Execute SQL query
        try:
            result = connection.execute(text(sql), params)

            # Fetch results
            rows = result.fetchall()
            logger.debug("Fetched %d rows", len(rows))
            return rows
        except Exception as e:
            logger.error(
                "Error in get_cities_by_county_alias_and_state_alias operation: %s",
                str(e),
            )
            raise

    @classmethod
    def get_cities_by_state_alias(
        cls,
        *,
        connection: Connection,
        state_alias: str,
    ) -> List[Row]:
        """
        Select operation: get_cities_by_state_alias (class method).
        Statement type: fetch
        Args:
            connection: SQLAlchemy database connection
            state_alias: Parameter for state_alias

        Returns:
            List of result rows
        """
        logger = cls.logger

        logger.debug("Executing get_cities_by_state_alias operation")

        sql = """
        SELECT * 
        FROM city 
        WHERE state_alias = :state_alias 
        ORDER BY county_alias, name
        """

        # Prepare parameters
        params = {
            "state_alias": state_alias,
        }
        logger.debug("Parameters: %s", params)

        # Execute SQL query
        try:
            result = connection.execute(text(sql), params)

            # Fetch results
            rows = result.fetchall()
            logger.debug("Fetched %d rows", len(rows))
            return rows
        except Exception as e:
            logger.error("Error in get_cities_by_state_alias operation: %s", str(e))
            raise

    @classmethod
    def get_all_cities(
        cls,
        *,
        connection: Connection,
    ) -> List[Row]:
        """
        Select operation: get_all_cities (class method).
        Statement type: fetch
        Args:
            connection: SQLAlchemy database connection

        Returns:
            List of result rows
        """
        logger = cls.logger

        logger.debug("Executing get_all_cities operation")

        sql = """
        SELECT * 
        FROM city 
        ORDER BY state_alias, county_alias, name
        """

        # Execute SQL query
        try:
            result = connection.execute(text(sql))

            # Fetch results
            rows = result.fetchall()
            logger.debug("Fetched %d rows", len(rows))
            return rows
        except Exception as e:
            logger.error("Error in get_all_cities operation: %s", str(e))
            raise
